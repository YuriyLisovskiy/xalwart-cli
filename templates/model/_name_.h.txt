<% .Header.CopyrightNotice %>

#pragma once

// <% .Header.FrameworkName %>
#include <<% .Header.FrameworkName %>.orm/db/model.h>


class <% .ClassName %> : public <% .Header.FrameworkNamespace %>::orm::db::Model<% if .IsJsonSerializable %>, public <% .Header.FrameworkNamespace %>::IJsonSerializable<% end %>
{
public:
	long long int id{};

	static constexpr const char* meta_table_name = "<% .TableName %>";

	inline static const std::tuple meta_columns = {<% if .WithId %>
		<% .Header.FrameworkNamespace %>::orm::db::make_pk_column_meta("id", &<% .ClassName %>::id)
	<% end %>};

	<% .ClassName %>() = default;

	inline void __orm_set_column__(const std::string& column_name, const char* data) override
	{
		this->__orm_set_column_data__(<% .ClassName %>::meta_columns, column_name, data);
	}

	[[nodiscard]]
	inline std::string to_string() const override
	{
	    <% if .WithId %>
	    if (this->is_null())
        {
        	return "null";
        }

        return "<% .Name %>:\n  id: " + std::to_string(this->id);
	    <% else %>
	    return <% .Header.FrameworkNamespace %>::orm::db::Model::to_string();
	    <% end %>
	}

    <% if .IsJsonSerializable %>
	[[nodiscard]]
	nlohmann::json to_json() const override;
	<% end %>
};
