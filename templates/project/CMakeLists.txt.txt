cmake_minimum_required(VERSION <% .CMakeMinimumVersion %>)

set(CMAKE_CXX_STANDARD <% .CMakeCPPStandard %>)

project(<% .ProjectName %>)
set(BINARY application)

# Load and filter project sources.
file(
    GLOB_RECURSE SOURCES
    LIST_DIRECTORIES true
    */*.h */*.cpp
)
list(
	FILTER SOURCES
	EXCLUDE REGEX "^.*/(include|lib$|media|static|templates|cmake-build-*)/?.*"
)
foreach(entry ${SOURCES})
    if (IS_DIRECTORY ${entry})
        list(REMOVE_ITEM SOURCES ${entry})
    else()
        message(${entry})
    endif()
endforeach()

add_executable(${BINARY} ${SOURCES} "./main.cpp")
<% if .InstallFramework %>
# Setup and link '<% .FrameworkName %>' framework.
set(<% .FrameworkName | upper %>_FRAMEWORK "<% .FrameworkName %>")
set(LIB_DIRECTORY ${PROJECT_SOURCE_DIR}/lib)
if (WIN32)
    set(DLL ${LIB_DIRECTORY}/<% .FrameworkName %>/${<% .FrameworkName | upper %>_FRAMEWORK}-<% .FrameworkVersion %>.lib)
else()
    set(DLL ${LIB_DIRECTORY}/<% .FrameworkName %>/lib${<% .FrameworkName | upper %>_FRAMEWORK}-<% .FrameworkVersion %>.so)
endif()
set(INCLUDE_DIR ${PROJECT_SOURCE_DIR}/include)
target_include_directories(${BINARY} PUBLIC ${INCLUDE_DIR}/${<% .FrameworkName | upper %>_FRAMEWORK}/vendor/yaml)
target_include_directories(${BINARY} PUBLIC ${INCLUDE_DIR})
target_link_libraries(${BINARY} ${DLL})

# Required for <experimental/filesystem> on Linux which is used by '<% .FrameworkName %>'
if (UNIX)
    target_link_libraries(${BINARY} stdc++fs)
endif()
<% else %>
<% .CMakeListsTxtToDoLine %>
<% end %>